# Worker Dockerfile - includes full Node.js environment for running scripts
FROM node:20-alpine
WORKDIR /app

# Install dependencies for native modules
RUN apk add --no-cache libc6-compat python3 make g++

# Install pnpm
RUN npm install -g pnpm@9

# Copy package files
COPY package.json pnpm-lock.yaml pnpm-workspace.yaml ./
COPY apps/web/package.json ./apps/web/
COPY apps/mcp-server/package.json ./apps/mcp-server/
COPY internal-packages/db/package.json ./internal-packages/db/
COPY internal-packages/ai/package.json ./internal-packages/ai/
COPY internal-packages/domain/package.json ./internal-packages/domain/

# Copy Prisma schema
COPY internal-packages/db/prisma ./internal-packages/db/prisma/

# Install all dependencies (including dev dependencies for tsx) with cache mount
RUN --mount=type=cache,target=/app/node_modules/.pnpm \
    --mount=type=cache,target=/app/.pnpm-store \
    pnpm install --frozen-lockfile

# Prisma client is generated automatically by postinstall hook during pnpm install

# Copy source code
COPY . .

# Build internal packages in dependency order
# Note: No need to reinstall after copying source - workspace references work from initial install

# Build packages directly with npx tsc
RUN npx tsc --project internal-packages/db/tsconfig.json
RUN npx tsc --project internal-packages/domain/tsconfig.json  
RUN npx tsc --project internal-packages/ai/tsconfig.json

# Create non-root user
RUN addgroup -g 1001 -S nodejs && \
    adduser -S nextjs -u 1001

USER nextjs

# Run the adaptive job processor
CMD ["pnpm", "--filter", "@roast/web", "run", "process-jobs-adaptive"]