# Worker Dockerfile - Simple approach that builds everything in place
FROM node:20-alpine AS builder

WORKDIR /app

# Install dependencies for build
RUN apk add --no-cache libc6-compat python3 make g++

# Enable pnpm
RUN corepack enable && corepack prepare pnpm@latest --activate

# Copy everything
COPY . .

# Install all dependencies
RUN --mount=type=cache,id=pnpm,target=/pnpm/store \
    pnpm install --frozen-lockfile

# Build the packages that need building (in dependency order)
RUN pnpm --filter @roast/db run build
RUN pnpm --filter @roast/domain run build
# Note: @roast/ai doesn't need building - it's consumed as TypeScript by tsx

# ================================ Runner ================================
FROM node:20-alpine AS runner

WORKDIR /app

# Install runtime dependencies
RUN apk add --no-cache libc6-compat
RUN corepack enable && corepack prepare pnpm@latest --activate

# Create non-root user
RUN addgroup -g 1001 -S nodejs && \
    adduser -S nextjs -u 1001

# Copy the entire built application from builder
COPY --from=builder --chown=nextjs:nodejs /app .

# Switch to non-root user
USER nextjs

# Set working directory to the web app
WORKDIR /app/apps/web

# Run the adaptive job processor
CMD ["pnpm", "run", "process-jobs-adaptive"]