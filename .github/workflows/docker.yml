name: Docker Build and Push

on:
  push:
    branches: [main, staging]
    tags:
      - 'v*'
  pull_request:
    branches: [main, staging]
  workflow_dispatch:

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}
  ARGOCD_SERVER: argo.k8s.quantifieduncertainty.org

jobs:
  build-and-push:
    name: Build and Push Docker Images
    runs-on: ubuntu-latest
    timeout-minutes: 20 # Prevent hanging builds
    permissions:
      contents: read
      packages: write
    strategy:
      fail-fast: false # Don't stop other builds if one fails
      matrix:
        include:
          - dockerfile: Dockerfile
            suffix: ""
            name: "main"
          - dockerfile: Dockerfile.worker
            suffix: "-worker"
            name: "worker"

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to GitHub Container Registry
        if: github.event_name != 'pull_request'
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Extract metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}${{ matrix.suffix }}
          tags: |
            type=ref,event=branch
            type=ref,event=pr
            type=semver,pattern={{version}}
            type=semver,pattern={{major}}.{{minor}}
            type=sha,prefix=sha-,format=long

      - name: Build and push Docker image (${{ matrix.name }})
        uses: docker/build-push-action@v5
        with:
          context: .
          file: ${{ matrix.dockerfile }}
          platforms: linux/amd64
          push: ${{ github.event_name != 'pull_request' }}
          load: ${{ github.event_name == 'pull_request' }}
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: |
            type=gha,scope=${{ matrix.name }}
            type=gha,scope=shared
          cache-to: type=gha,mode=max,scope=${{ matrix.name }}
          build-args: |
            BUILD_DATE=${{ fromJSON(steps.meta.outputs.json).labels['org.opencontainers.image.created'] }}
            VCS_REF=${{ fromJSON(steps.meta.outputs.json).labels['org.opencontainers.image.revision'] }}


      - name: Test Docker image - Basic functionality
        if: github.event_name == 'pull_request'
        run: |
          echo "Testing basic Docker image functionality..."
          docker run --rm ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}${{ matrix.suffix }}:pr-${{ github.event.number }} node -e "console.log('Basic Node.js test passed')"
          
      - name: Test Docker image - Package availability
        if: github.event_name == 'pull_request'
        run: |
          echo "Testing package availability for ${{ matrix.name }} image..."
          
          if [ "${{ matrix.suffix }}" = "-worker" ]; then
            # Worker image - verify pnpm and Node.js
            docker run --rm ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}${{ matrix.suffix }}:pr-${{ github.event.number }} sh -c "
              pnpm --version > /dev/null && echo '✓ pnpm available' && 
              node --version > /dev/null && echo '✓ Node.js available'
            "
          else
            # Main image - verify Node.js
            docker run --rm ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}${{ matrix.suffix }}:pr-${{ github.event.number }} \
              node -e "console.log('✓ Node.js available');"
          fi
          
      - name: Test Docker image - Runtime validation
        if: github.event_name == 'pull_request'
        run: |
          echo "Running runtime validation for ${{ matrix.name }} image..."
          
          if [ "${{ matrix.suffix }}" = "-worker" ]; then
            # Worker image - verify process-jobs-adaptive command is available
            docker run --rm ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}${{ matrix.suffix }}:pr-${{ github.event.number }} \
              timeout 5 pnpm run process-jobs-adaptive --help 2>/dev/null || echo "✓ Worker command available"
          else
            # Main image - basic runtime check
            docker run --rm ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}${{ matrix.suffix }}:pr-${{ github.event.number }} \
              node -e "console.log('✓ Runtime validation passed');"
          fi
            
      - name: Test Worker-specific functionality
        if: github.event_name == 'pull_request' && matrix.suffix == '-worker'
        run: |
          echo "Testing worker-specific functionality..."
          docker run --rm ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}${{ matrix.suffix }}:pr-${{ github.event.number }} sh -c "
            pnpm tsx --version > /dev/null && echo '✓ tsx available for TypeScript execution'
          "

  update-argocd:
    name: Update ArgoCD Deployment
    needs: build-and-push  # This waits for both matrix builds to complete
    runs-on: ubuntu-latest
    if: github.event_name == 'push' && (github.ref_name == 'main' || github.ref_name == 'staging')
    timeout-minutes: 10
    environment: ${{ github.ref_name == 'main' && 'Production' || 'Staging' }}
    env:
      ARGOCD_APP: ${{ github.ref_name == 'main' && 'roast-my-post' || 'roast-my-post-staging' }}
    
    steps:
      - name: Update ArgoCD image tags
        env:
          ARGOCD_AUTH_TOKEN: ${{ secrets.ARGOCD_AUTH_TOKEN }}
        run: |
          set -e  # Exit on any error
          
          # Download ArgoCD CLI
          echo "Downloading ArgoCD CLI..."
          curl -sSL -o /usr/local/bin/argocd https://${{ARGOCD_SERVER}}/download/argocd-linux-amd64 || {
            echo "Failed to download ArgoCD CLI"
            exit 1
          }
          chmod +x /usr/local/bin/argocd
          
          # ArgoCD CLI uses ARGOCD_AUTH_TOKEN env var automatically, but needs --server flag
          echo "Updating image tags to sha-${{ github.sha }}..."
          /usr/local/bin/argocd app set ${ARGOCD_APP} \
            --server ${{ARGOCD_SERVER}} \
            --helm-set image.tag=sha-${{ github.sha }} \
            --helm-set workerImage.tag=sha-${{ github.sha }}
          
          # Trigger sync (may fail if auto-sync already started)
          echo "Triggering application sync (optional - may already be syncing)..."
          /usr/local/bin/argocd app sync ${ARGOCD_APP} \
            --server ${{ARGOCD_SERVER}} || echo "Sync already in progress or not needed"
          
          # Wait for health only (not sync to avoid OutOfSync during rolling updates)
          echo "Waiting for deployment to become healthy (timeout: 5 minutes)..."
          /usr/local/bin/argocd app wait ${ARGOCD_APP} \
            --server ${{ARGOCD_SERVER}} \
            --timeout 300 \
            --health
          
          # Verify the correct SHA is actually deployed
          echo "Verifying correct image version is deployed..."
          EXPECTED_TAG="sha-${{ github.sha }}"
          DEPLOYED_IMAGES=$(/usr/local/bin/argocd app get ${ARGOCD_APP} \
            --server ${{ARGOCD_SERVER}} \
            --refresh \
            --output json | jq -r '.status.summary.images[]')
          
          echo "Expected tag: ${EXPECTED_TAG}"
          echo "Deployed images:"
          echo "${DEPLOYED_IMAGES}"
          
          # Check both web and worker images contain our SHA
          if echo "${DEPLOYED_IMAGES}" | grep -q "${EXPECTED_TAG}"; then
            echo "✅ Deployment successful! Correct version is running."
          else
            echo "❌ ERROR: Deployment is healthy but running wrong version!"
            echo "Expected ${EXPECTED_TAG} but it's not in the deployed images"
            exit 1
          fi
          
          # Get final status for the logs
          echo "Final status:"
          /usr/local/bin/argocd app get ${ARGOCD_APP} \
            --server ${{ARGOCD_SERVER}} \
            --output json | \
            jq -r '"Sync: " + .status.sync.status + ", Health: " + .status.health.status'

  security-scan:
    name: Security Scan
    runs-on: ubuntu-latest
    needs: build-and-push
    if: github.event_name != 'pull_request'
    timeout-minutes: 10
    permissions:
      contents: read
      packages: read
      security-events: write
    strategy:
      fail-fast: false
      matrix:
        include:
          - suffix: ""
            name: "main"
          - suffix: "-worker" 
            name: "worker"

    steps:
      - name: Run Trivy vulnerability scanner (${{ matrix.name }})
        uses: aquasecurity/trivy-action@master
        with:
          image-ref: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}${{ matrix.suffix }}:${{ github.ref_name }}
          format: 'sarif'
          output: 'trivy-results-${{ matrix.name }}.sarif'

      - name: Upload Trivy scan results to GitHub Security tab (${{ matrix.name }})
        uses: github/codeql-action/upload-sarif@v3
        with:
          sarif_file: 'trivy-results-${{ matrix.name }}.sarif'
