name: CI/CD Pipeline

on:
  push:
    branches: [main]
  pull_request:
    branches: [main]
  workflow_dispatch:

env:
  # Common environment variables
  NEXTAUTH_URL: http://localhost:3000
  AUTH_SECRET: test-secret-for-ci-only
  ANTHROPIC_API_KEY: dummy-key-for-ci

jobs:
  # Quick static checks (2-3 minutes) - runs first to fail fast
  static-checks:
    name: Static Analysis
    runs-on: ubuntu-latest
    timeout-minutes: 10
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Install pnpm
        uses: pnpm/action-setup@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: "20"
          cache: "pnpm"

      - name: Cache Turbo
        uses: actions/cache@v4
        with:
          path: .turbo
          key: ${{ runner.os }}-turbo-${{ github.sha }}
          restore-keys: |
            ${{ runner.os }}-turbo-

      - name: Install dependencies
        run: pnpm install --frozen-lockfile

      - name: Generate Prisma client
        run: pnpm --filter @roast/db run gen

      - name: Build dependent packages
        run: pnpm turbo run build --filter='@roast/domain' --filter='@roast/db' --filter='@roast/ai'

      - name: Run checks in parallel
        run: pnpm turbo run typecheck lint --parallel

      - name: Validate script TypeScript
        run: pnpm --filter @roast/web run typecheck:scripts

  # Unit tests with database (3-4 minutes) - parallel with other jobs
  unit-tests:
    name: Unit Tests
    runs-on: ubuntu-latest
    timeout-minutes: 15
    services:
      postgres:
        image: postgres:16
        env:
          POSTGRES_USER: postgres
          POSTGRES_PASSWORD: postgres
          POSTGRES_DB: roast_my_post_test
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432
    env:
      DATABASE_URL: postgresql://postgres:postgres@localhost:5432/roast_my_post_test
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Install pnpm
        uses: pnpm/action-setup@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: "20"
          cache: "pnpm"

      - name: Cache Jest
        uses: actions/cache@v4
        with:
          path: /tmp/jest_*
          key: ${{ runner.os }}-jest-${{ hashFiles('**/*.test.ts', '**/*.test.tsx') }}
          restore-keys: |
            ${{ runner.os }}-jest-

      - name: Install dependencies
        run: pnpm install --frozen-lockfile

      - name: Generate Prisma client
        run: pnpm --filter @roast/db run gen

      - name: Build dependent packages
        run: pnpm turbo run build --filter='@roast/domain' --filter='@roast/db' --filter='@roast/ai'

      - name: Run database migrations
        run: pnpm --filter @roast/db exec prisma migrate deploy

      - name: Run configuration validation tests
        run: pnpm --filter @roast/web run test:ci --testMatch='**/*config*.test.ts'

      - name: Run script smoke tests
        run: pnpm --filter @roast/web run test:ci --testMatch='**/*script*.test.ts'

      - name: Validate script runtime
        run: pnpm --filter @roast/web run test:scripts

      - name: Run unit tests with coverage (PR builds skip coverage)
        run: |
          if [[ "${{ github.event_name }}" == "pull_request" ]]; then
            pnpm --filter @roast/web run test:ci-nocov
          else
            pnpm --filter @roast/web run test:ci --coverage --coverageReporters=text-summary
          fi

  # Integration tests (3-4 minutes) - parallel with other jobs  
  integration-tests:
    name: Integration Tests
    runs-on: ubuntu-latest
    timeout-minutes: 15
    needs: [static-checks] # Only run if static checks pass
    services:
      postgres:
        image: postgres:16
        env:
          POSTGRES_USER: postgres
          POSTGRES_PASSWORD: postgres
          POSTGRES_DB: roast_my_post_test
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432
    env:
      DATABASE_URL: postgresql://postgres:postgres@localhost:5432/roast_my_post_test
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Install pnpm
        uses: pnpm/action-setup@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: "20"
          cache: "pnpm"

      - name: Install dependencies
        run: pnpm install --frozen-lockfile

      - name: Generate Prisma client
        run: pnpm --filter @roast/db run gen

      - name: Build dependent packages
        run: pnpm turbo run build --filter='@roast/domain' --filter='@roast/db' --filter='@roast/ai'

      - name: Run database migrations
        run: pnpm --filter @roast/db exec prisma migrate deploy

      - name: Run safe integration tests
        run: pnpm --filter @roast/web run test:ci-integration

  # Application build (4-5 minutes) - parallel with tests
  build:
    name: Build Application
    runs-on: ubuntu-latest
    timeout-minutes: 15
    needs: [static-checks] # Only run if static checks pass
    env:
      DATABASE_URL: postgresql://dummy/dummy # Build-time only
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Install pnpm
        uses: pnpm/action-setup@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: "20"
          cache: "pnpm"

      - name: Cache Next.js build
        uses: actions/cache@v4
        with:
          path: |
            apps/web/.next/cache
            node_modules/.cache
          key: ${{ runner.os }}-nextjs-${{ hashFiles('**/pnpm-lock.yaml') }}-${{ hashFiles('**/*.js', '**/*.jsx', '**/*.ts', '**/*.tsx') }}
          restore-keys: |
            ${{ runner.os }}-nextjs-${{ hashFiles('**/pnpm-lock.yaml') }}-

      - name: Install dependencies
        run: pnpm install --frozen-lockfile

      - name: Generate Prisma client
        run: pnpm --filter @roast/db run gen

      - name: Build all packages
        run: pnpm turbo run build

  # Docker build test (runs in parallel)
  docker-test:
    name: Docker Build Test
    runs-on: ubuntu-latest
    timeout-minutes: 10
    needs: [static-checks] # Only run if static checks pass
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Test Docker build
        run: |
          docker build -t roastmypost:ci-test .
          docker run --rm roastmypost:ci-test node -e "console.log('Docker build test passed')"

  # Sharded unit tests - only run if explicitly requested via commit message or manual trigger
  unit-tests-sharded:
    name: Unit Tests (Sharded ${{ matrix.shard }}/4)
    runs-on: ubuntu-latest
    timeout-minutes: 15
    if: contains(github.event.head_commit.message, '[test-sharded]') || github.event_name == 'workflow_dispatch'
    strategy:
      fail-fast: false
      matrix:
        shard: [1, 2, 3, 4]
    services:
      postgres:
        image: postgres:16
        env:
          POSTGRES_USER: postgres
          POSTGRES_PASSWORD: postgres
          POSTGRES_DB: roast_my_post_test
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432
    env:
      DATABASE_URL: postgresql://postgres:postgres@localhost:5432/roast_my_post_test
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Install pnpm
        uses: pnpm/action-setup@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: "20"
          cache: "pnpm"

      - name: Install dependencies
        run: pnpm install --frozen-lockfile

      - name: Generate Prisma client
        run: pnpm --filter @roast/db run gen

      - name: Build dependent packages
        run: pnpm turbo run build --filter='@roast/domain' --filter='@roast/db' --filter='@roast/ai'

      - name: Run database migrations
        run: pnpm --filter @roast/db exec prisma migrate deploy

      - name: Run tests (shard ${{ matrix.shard }} of 4)
        run: pnpm --filter @roast/web run test:shard --shard=${{ matrix.shard }}/4

  # Final status check - required for branch protection
  ci-status:
    name: CI Status
    runs-on: ubuntu-latest
    timeout-minutes: 5
    needs: [unit-tests, integration-tests, build, docker-test]
    if: always()
    steps:
      - name: Check CI Status
        run: |
          echo "=== CI Results ==="
          echo "Unit Tests: ${{ needs.unit-tests.result }}"
          echo "Integration Tests: ${{ needs.integration-tests.result }}"
          echo "Build: ${{ needs.build.result }}"
          echo "Docker Test: ${{ needs.docker-test.result }}"
          
          # Check for failures or cancellations (skipped is OK)
          if [[ "${{ needs.unit-tests.result }}" == "failure" || "${{ needs.unit-tests.result }}" == "cancelled" || \
                "${{ needs.integration-tests.result }}" == "failure" || "${{ needs.integration-tests.result }}" == "cancelled" || \
                "${{ needs.build.result }}" == "failure" || "${{ needs.build.result }}" == "cancelled" || \
                "${{ needs.docker-test.result }}" == "failure" || "${{ needs.docker-test.result }}" == "cancelled" ]]; then
            echo "❌ CI failed - some jobs failed or were cancelled"
            exit 1
          fi
          echo "✅ All CI checks passed!"