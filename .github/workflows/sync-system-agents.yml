name: Sync System Agents

on:
  push:
    branches:
      - main
    paths:
      - 'internal-packages/db/system-agents/**'
  workflow_dispatch:
    inputs:
      force_sync:
        description: 'Force sync all agents (even if unchanged)'
        required: false
        default: false
        type: boolean

jobs:
  backup:
    name: Backup Database
    uses: ./.github/workflows/database-backup.yml
    with:
      backup_prefix: 'pre-agent-sync'
    secrets: inherit

  sync-agents:
    name: Sync System Agents
    needs: backup
    runs-on: ubuntu-latest
    environment: Production
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Install pnpm
        uses: pnpm/action-setup@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'pnpm'

      - name: Install dependencies
        run: pnpm install --frozen-lockfile

      - name: Generate Prisma client
        run: pnpm --filter @roast/db run gen

      - name: Show backup info
        run: |
          echo "✅ Database backed up successfully"
          echo "Backup filename: ${{ needs.backup.outputs.backup_filename }}"
          echo "Proceeding with agent sync..."

      - name: List current system agents
        env:
          DATABASE_URL: ${{ secrets.DATABASE_URL }}
        run: |
          echo "## Current System Agents in Database" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "| Agent ID | Name | Version | Last Updated |" >> $GITHUB_STEP_SUMMARY
          echo "| -------- | ---- | ------- | ------------ |" >> $GITHUB_STEP_SUMMARY
          
          # Create script to query current agents
          cat > list_agents.js << 'EOF'
          const { PrismaClient } = require('@roast/db/generated');
          const prisma = new PrismaClient();
          
          async function main() {
            const agents = await prisma.agent.findMany({
              where: { isSystemManaged: true },
              include: {
                versions: {
                  orderBy: { version: 'desc' },
                  take: 1
                }
              }
            });
            
            for (const agent of agents) {
              const version = agent.versions[0];
              const updatedAt = agent.updatedAt.toISOString().split('T')[0];
              console.log(`| ${agent.id} | ${version?.name || 'Unknown'} | v${version?.version || 0} | ${updatedAt} |`);
            }
          }
          
          main().catch(console.error).finally(() => prisma.$disconnect());
          EOF
          
          node list_agents.js >> $GITHUB_STEP_SUMMARY || echo "| - | Failed to query agents | - | - |" >> $GITHUB_STEP_SUMMARY
          rm -f list_agents.js
          echo "" >> $GITHUB_STEP_SUMMARY

      - name: Sync system agents
        env:
          DATABASE_URL: ${{ secrets.DATABASE_URL }}
        run: |
          echo "### Syncing System Agents..." >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          
          # Run the sync script and capture output
          cd internal-packages/db
          SYNC_OUTPUT=$(npx tsx system-agents/sync.ts 2>&1)
          echo "$SYNC_OUTPUT"
          
          # Parse sync output for summary
          if echo "$SYNC_OUTPUT" | grep -q "✅ System agents synchronization complete"; then
            echo "✅ **Agent synchronization completed successfully!**" >> $GITHUB_STEP_SUMMARY
            echo "" >> $GITHUB_STEP_SUMMARY
            
            # Extract agent count
            AGENT_COUNT=$(echo "$SYNC_OUTPUT" | grep "Synchronized" | grep -o '[0-9]\+' | head -1)
            echo "📊 **Synchronized agents**: $AGENT_COUNT" >> $GITHUB_STEP_SUMMARY
            echo "" >> $GITHUB_STEP_SUMMARY
            
            # Show updated/created agents
            echo "#### 🔄 Changes Made:" >> $GITHUB_STEP_SUMMARY
            echo "\`\`\`" >> $GITHUB_STEP_SUMMARY
            echo "$SYNC_OUTPUT" | grep -E "(→ Creating|→ Updating|✓ Created|✓ Updated)" >> $GITHUB_STEP_SUMMARY || echo "No changes made - all agents up to date" >> $GITHUB_STEP_SUMMARY
            echo "\`\`\`" >> $GITHUB_STEP_SUMMARY
            echo "" >> $GITHUB_STEP_SUMMARY
          else
            echo "❌ **Agent synchronization failed!**" >> $GITHUB_STEP_SUMMARY
            echo "" >> $GITHUB_STEP_SUMMARY
            echo "#### Error Output:" >> $GITHUB_STEP_SUMMARY
            echo "\`\`\`" >> $GITHUB_STEP_SUMMARY
            echo "$SYNC_OUTPUT" | tail -20 >> $GITHUB_STEP_SUMMARY
            echo "\`\`\`" >> $GITHUB_STEP_SUMMARY
            exit 1
          fi

      - name: List updated system agents
        if: success()
        env:
          DATABASE_URL: ${{ secrets.DATABASE_URL }}
        run: |
          echo "## Final System Agents Status" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "| Agent ID | Name | Current Version | Plugin IDs |" >> $GITHUB_STEP_SUMMARY
          echo "| -------- | ---- | --------------- | ---------- |" >> $GITHUB_STEP_SUMMARY
          
          # Create script to query final agent state
          cat > final_agents.js << 'EOF'
          const { PrismaClient } = require('@roast/db/generated');
          const prisma = new PrismaClient();
          
          async function main() {
            const agents = await prisma.agent.findMany({
              where: { isSystemManaged: true },
              include: {
                versions: {
                  orderBy: { version: 'desc' },
                  take: 1
                }
              },
              orderBy: { id: 'asc' }
            });
            
            for (const agent of agents) {
              const version = agent.versions[0];
              const pluginIds = version?.pluginIds?.join(', ') || 'None';
              console.log(`| ${agent.id} | ${version?.name || 'Unknown'} | v${version?.version || 0} | ${pluginIds} |`);
            }
          }
          
          main().catch(console.error).finally(() => prisma.$disconnect());
          EOF
          
          node final_agents.js >> $GITHUB_STEP_SUMMARY || echo "| - | Failed to query final state | - | - |" >> $GITHUB_STEP_SUMMARY
          rm -f final_agents.js
          echo "" >> $GITHUB_STEP_SUMMARY

      - name: Verify agent configurations
        env:
          DATABASE_URL: ${{ secrets.DATABASE_URL }}
        run: |
          echo "### 🔍 Verification Checks" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          
          # Create verification script
          cat > verify_agents.js << 'EOF'
          const { PrismaClient } = require('@roast/db/generated');
          const { systemAgents } = require('./system-agents/agents');
          const prisma = new PrismaClient();
          
          async function main() {
            const dbAgents = await prisma.agent.findMany({
              where: { isSystemManaged: true },
              include: {
                versions: {
                  orderBy: { version: 'desc' },
                  take: 1
                }
              }
            });
            
            console.log(`✅ Expected ${systemAgents.length} system agents, found ${dbAgents.length} in database`);
            
            // Check each expected agent exists
            for (const expectedAgent of systemAgents) {
              const dbAgent = dbAgents.find(a => a.id === expectedAgent.id);
              if (dbAgent) {
                const version = dbAgent.versions[0];
                console.log(`✅ ${expectedAgent.id}: v${version?.version} (${version?.name})`);
              } else {
                console.log(`❌ ${expectedAgent.id}: MISSING from database`);
              }
            }
            
            // Check for unexpected agents
            for (const dbAgent of dbAgents) {
              const expectedAgent = systemAgents.find(a => a.id === dbAgent.id);
              if (!expectedAgent) {
                console.log(`⚠️  ${dbAgent.id}: In database but not in code definitions`);
              }
            }
          }
          
          main().catch(console.error).finally(() => prisma.$disconnect());
          EOF
          
          cd internal-packages/db
          VERIFY_OUTPUT=$(node verify_agents.js 2>&1)
          echo "$VERIFY_OUTPUT"
          
          echo "\`\`\`" >> $GITHUB_STEP_SUMMARY
          echo "$VERIFY_OUTPUT" >> $GITHUB_STEP_SUMMARY
          echo "\`\`\`" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          
          rm -f verify_agents.js

      - name: Sync summary
        if: always()
        run: |
          echo "## 📋 Agent Sync Summary" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          if [ "${{ job.status }}" == "success" ]; then
            echo "### ✅ System agents sync completed successfully!" >> $GITHUB_STEP_SUMMARY
            echo "" >> $GITHUB_STEP_SUMMARY
            echo "#### 🔍 Details:" >> $GITHUB_STEP_SUMMARY
            echo "- **Backup created**: \`${{ needs.backup.outputs.backup_filename }}\`" >> $GITHUB_STEP_SUMMARY
            echo "- **Branch**: \`${{ github.ref_name }}\`" >> $GITHUB_STEP_SUMMARY
            echo "- **Commit**: \`${{ github.sha }}\`" >> $GITHUB_STEP_SUMMARY
            echo "- **Triggered by**: ${{ github.actor }}" >> $GITHUB_STEP_SUMMARY
            echo "- **Force sync**: ${{ github.event.inputs.force_sync || 'false' }}" >> $GITHUB_STEP_SUMMARY
            echo "- **Time**: $(date -u '+%Y-%m-%d %H:%M:%S UTC')" >> $GITHUB_STEP_SUMMARY
          else
            echo "### ❌ System agents sync failed!" >> $GITHUB_STEP_SUMMARY
            echo "" >> $GITHUB_STEP_SUMMARY
            echo "#### ⚠️ Recovery Information:" >> $GITHUB_STEP_SUMMARY
            echo "- **Backup available**: \`${{ needs.backup.outputs.backup_filename }}\`" >> $GITHUB_STEP_SUMMARY
            echo "- **Restore command**: Use database-restore workflow" >> $GITHUB_STEP_SUMMARY
            echo "- Check the logs above for specific error details" >> $GITHUB_STEP_SUMMARY
          fi