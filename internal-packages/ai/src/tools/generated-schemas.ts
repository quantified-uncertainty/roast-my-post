/**
 * Auto-generated tool schemas
 * Generated by scripts/generate-schemas.ts
 * DO NOT EDIT MANUALLY
 */

export const toolSchemas = {
  "check-spelling-grammar": {
    "config": {
      "id": "check-spelling-grammar",
      "name": "Check Spelling & Grammar",
      "description": "Analyze text for spelling and grammar errors using Claude with advanced error detection",
      "version": "2.0.0",
      "category": "analysis",
      "costEstimate": "~$0.01-0.02 per check",
      "path": "/api/tools/check-spelling-grammar",
      "status": "stable"
    },
    "inputSchema": {
      "type": "object",
      "properties": {
        "text": {
          "type": "string",
          "minLength": 1,
          "maxLength": 500000,
          "description": "The text to check for spelling and grammar errors"
        },
        "context": {
          "type": "string",
          "maxLength": 1000,
          "description": "Additional context about the text (e.g., academic paper, casual email, technical documentation)"
        },
        "maxErrors": {
          "type": "number",
          "minimum": 1,
          "maximum": 100,
          "default": 50,
          "description": "Maximum number of errors to return"
        },
        "convention": {
          "type": "string",
          "enum": [
            "US",
            "UK",
            "auto"
          ],
          "default": "auto",
          "description": "Which English convention to use"
        },
        "strictness": {
          "type": "string",
          "enum": [
            "minimal",
            "standard",
            "thorough"
          ],
          "default": "standard",
          "description": "How strict the checking should be"
        }
      },
      "required": [
        "text"
      ],
      "additionalProperties": false,
      "$schema": "http://json-schema.org/draft-07/schema#"
    },
    "outputSchema": {
      "type": "object",
      "properties": {
        "errors": {
          "type": "array",
          "items": {
            "type": "object",
            "properties": {
              "text": {
                "type": "string",
                "description": "The EXACT incorrect text from the input"
              },
              "correction": {
                "type": "string",
                "description": "Suggested correction"
              },
              "conciseCorrection": {
                "type": "string",
                "description": "Minimal change notation (e.g., \"teh â†’ the\")"
              },
              "type": {
                "type": "string",
                "enum": [
                  "spelling",
                  "grammar"
                ],
                "description": "Type of error"
              },
              "context": {
                "type": "string",
                "description": "Surrounding context (20-30 chars each side)"
              },
              "importance": {
                "type": "number",
                "minimum": 0,
                "maximum": 100,
                "description": "Importance score (0-100)"
              },
              "confidence": {
                "type": "number",
                "minimum": 0,
                "maximum": 100,
                "description": "Confidence in this error (0-100)"
              },
              "description": {
                "type": [
                  "string",
                  "null"
                ],
                "description": "Explanation for complex cases (0 for obvious, 1-2 sentences otherwise)"
              },
              "lineNumber": {
                "type": "number",
                "description": "Approximate line number where error occurs"
              }
            },
            "required": [
              "text",
              "correction",
              "conciseCorrection",
              "type",
              "importance",
              "confidence"
            ],
            "additionalProperties": false
          },
          "description": "List of errors found"
        },
        "metadata": {
          "type": "object",
          "properties": {
            "totalErrorsFound": {
              "type": "number",
              "description": "Total number of errors found (before limiting)"
            },
            "convention": {
              "type": "string",
              "enum": [
                "US",
                "UK",
                "mixed"
              ],
              "description": "Detected or applied convention"
            },
            "processingTime": {
              "type": "number",
              "description": "Processing time in milliseconds"
            }
          },
          "required": [
            "totalErrorsFound",
            "convention"
          ],
          "additionalProperties": false
        }
      },
      "required": [
        "errors"
      ],
      "additionalProperties": false,
      "$schema": "http://json-schema.org/draft-07/schema#"
    }
  },
  "extract-factual-claims": {
    "config": {
      "id": "extract-factual-claims",
      "name": "Extract Factual Claims",
      "description": "Extract and score verifiable factual claims from text",
      "version": "2.0.0",
      "category": "analysis",
      "costEstimate": "~$0.01-0.03 per analysis (depends on text length)",
      "path": "/api/tools/extract-factual-claims",
      "status": "stable"
    },
    "inputSchema": {
      "type": "object",
      "properties": {
        "text": {
          "type": "string",
          "minLength": 1,
          "maxLength": 50000,
          "description": "The text to analyze for factual claims"
        },
        "instructions": {
          "type": "string",
          "description": "Additional instructions for extraction"
        },
        "minQualityThreshold": {
          "type": "number",
          "minimum": 0,
          "maximum": 100,
          "default": 50,
          "description": "Minimum average score to include a claim"
        },
        "maxClaims": {
          "type": "number",
          "minimum": 1,
          "maximum": 100,
          "default": 30,
          "description": "Maximum number of claims to extract"
        }
      },
      "required": [
        "text"
      ],
      "additionalProperties": false,
      "$schema": "http://json-schema.org/draft-07/schema#"
    },
    "outputSchema": {
      "type": "object",
      "properties": {
        "claims": {
          "type": "array",
          "items": {
            "type": "object",
            "properties": {
              "originalText": {
                "type": "string",
                "description": "The exact claim as it appears in the text"
              },
              "topic": {
                "type": "string",
                "description": "Topic/category of the claim"
              },
              "importanceScore": {
                "type": "number",
                "minimum": 0,
                "maximum": 100,
                "description": "How important/central to the document"
              },
              "checkabilityScore": {
                "type": "number",
                "minimum": 0,
                "maximum": 100,
                "description": "How easily this can be fact-checked"
              },
              "truthProbability": {
                "type": "number",
                "minimum": 0,
                "maximum": 100,
                "description": "Estimated probability the fact-checker would verify as true"
              }
            },
            "required": [
              "originalText",
              "topic",
              "importanceScore",
              "checkabilityScore",
              "truthProbability"
            ],
            "additionalProperties": false
          },
          "description": "Extracted factual claims with scores"
        },
        "summary": {
          "type": "object",
          "properties": {
            "totalFound": {
              "type": "number"
            },
            "aboveThreshold": {
              "type": "number"
            },
            "averageQuality": {
              "type": "number"
            }
          },
          "required": [
            "totalFound",
            "aboveThreshold",
            "averageQuality"
          ],
          "additionalProperties": false,
          "description": "Summary statistics"
        }
      },
      "required": [
        "claims",
        "summary"
      ],
      "additionalProperties": false,
      "$schema": "http://json-schema.org/draft-07/schema#"
    }
  },
  "fact-checker": {
    "config": {
      "id": "fact-checker",
      "name": "Fact Checker",
      "description": "Verify the accuracy of specific factual claims",
      "version": "1.0.0",
      "category": "analysis",
      "costEstimate": "~$0.01-0.02 per claim",
      "path": "/tools/fact-checker",
      "status": "stable"
    },
    "inputSchema": {
      "type": "object",
      "properties": {
        "claim": {
          "type": "string",
          "minLength": 1,
          "maxLength": 1000,
          "description": "The factual claim to verify"
        },
        "context": {
          "type": "string",
          "maxLength": 5000,
          "description": "Additional context about the claim"
        },
        "searchForEvidence": {
          "type": "boolean",
          "default": false,
          "description": "Whether to search for additional evidence"
        }
      },
      "required": [
        "claim"
      ],
      "additionalProperties": false,
      "$schema": "http://json-schema.org/draft-07/schema#"
    },
    "outputSchema": {
      "type": "object",
      "properties": {
        "result": {
          "type": "object",
          "properties": {
            "verdict": {
              "type": "string",
              "enum": [
                "true",
                "false",
                "partially-true",
                "unverifiable",
                "outdated"
              ]
            },
            "confidence": {
              "type": "string",
              "enum": [
                "high",
                "medium",
                "low"
              ]
            },
            "explanation": {
              "type": "string"
            },
            "corrections": {
              "type": "string"
            },
            "conciseCorrection": {
              "type": "string"
            },
            "sources": {
              "type": "array",
              "items": {
                "type": "object",
                "properties": {
                  "title": {
                    "type": "string"
                  },
                  "url": {
                    "type": "string"
                  }
                },
                "required": [
                  "title",
                  "url"
                ],
                "additionalProperties": false
              }
            }
          },
          "required": [
            "verdict",
            "confidence",
            "explanation"
          ],
          "additionalProperties": false,
          "description": "The fact-check verdict and details"
        },
        "researchNotes": {
          "type": "string",
          "description": "Additional research notes if evidence was searched"
        },
        "perplexityData": {
          "description": "Full Perplexity research results for debug"
        },
        "llmInteraction": {
          "description": "LLM interaction for monitoring"
        }
      },
      "required": [
        "result"
      ],
      "additionalProperties": false,
      "$schema": "http://json-schema.org/draft-07/schema#"
    }
  },
  "check-math-with-mathjs": {
    "config": {
      "id": "check-math-with-mathjs",
      "name": "Check Math with MathJS",
      "description": "Verify mathematical statements using an agentic approach with Claude and MathJS",
      "version": "2.0.0",
      "category": "analysis",
      "costEstimate": "~$0.02-0.05 per statement (uses Claude with multiple tool calls)",
      "path": "/api/tools/check-math-with-mathjs",
      "status": "stable",
      "examples": [
        "2 + 2 = 4",
        "The binomial coefficient \"10 choose 3\" equals 120",
        "Converting 100 fahrenheit to celsius gives 37.78 degrees",
        "10% of 50 is 5",
        "sqrt(144) = 12",
        "log(1000, 10) = 3",
        "The derivative of xÂ³ is 3xÂ²",
        "5 km + 3000 m = 8 km",
        "The area of a circle with radius 5 is 25Ï€",
        "sin(90 degrees) = 1"
      ]
    },
    "inputSchema": {
      "type": "object",
      "properties": {
        "statement": {
          "type": "string",
          "minLength": 1,
          "maxLength": 1000,
          "description": "A mathematical statement to verify"
        },
        "context": {
          "type": "string",
          "maxLength": 500,
          "description": "Additional context about the statement"
        }
      },
      "required": [
        "statement"
      ],
      "additionalProperties": false,
      "$schema": "http://json-schema.org/draft-07/schema#"
    },
    "outputSchema": {
      "type": "object",
      "properties": {
        "statement": {
          "type": "string",
          "description": "The original statement that was verified"
        },
        "status": {
          "type": "string",
          "enum": [
            "verified_true",
            "verified_false",
            "cannot_verify"
          ],
          "description": "Verification result"
        },
        "explanation": {
          "type": "string",
          "description": "Clear explanation of why the statement is true, false, or cannot be verified"
        },
        "verificationDetails": {
          "type": "object",
          "properties": {
            "mathJsExpression": {
              "type": "string",
              "description": "The MathJS expression used for verification"
            },
            "computedValue": {
              "type": "string",
              "description": "The computed value from mathematical evaluation"
            },
            "steps": {
              "type": "array",
              "items": {
                "type": "object",
                "properties": {
                  "expression": {
                    "type": "string",
                    "description": "Mathematical expression"
                  },
                  "result": {
                    "type": "string",
                    "description": "Result of the expression"
                  }
                },
                "required": [
                  "expression",
                  "result"
                ],
                "additionalProperties": false
              },
              "description": "Step-by-step calculation"
            }
          },
          "additionalProperties": false,
          "description": "Details about how the verification was performed"
        },
        "errorDetails": {
          "type": "object",
          "properties": {
            "errorType": {
              "type": "string",
              "enum": [
                "calculation",
                "logic",
                "unit",
                "notation",
                "conceptual"
              ],
              "description": "Type of mathematical error"
            },
            "severity": {
              "type": "string",
              "enum": [
                "critical",
                "major",
                "minor"
              ],
              "description": "Severity of the error"
            },
            "conciseCorrection": {
              "type": "string",
              "description": "Concise summary of the correction (e.g., \"45 â†’ 234\", \"4x â†’ 5x\")"
            },
            "expectedValue": {
              "type": "string",
              "description": "The expected/correct value"
            },
            "actualValue": {
              "type": "string",
              "description": "The actual/incorrect value found in the statement"
            }
          },
          "required": [
            "errorType",
            "severity",
            "conciseCorrection"
          ],
          "additionalProperties": false,
          "description": "Details about the error (only present when status is verified_false)"
        },
        "error": {
          "type": "string",
          "description": "Technical error if verification failed"
        },
        "llmInteraction": {
          "type": "object",
          "properties": {
            "model": {
              "type": "string"
            },
            "prompt": {
              "type": "string"
            },
            "response": {
              "type": "string"
            },
            "tokensUsed": {
              "type": "object",
              "properties": {
                "prompt": {
                  "type": "number"
                },
                "completion": {
                  "type": "number"
                },
                "total": {
                  "type": "number"
                }
              },
              "required": [
                "prompt",
                "completion",
                "total"
              ],
              "additionalProperties": false
            },
            "timestamp": {
              "type": "string",
              "format": "date-time"
            },
            "duration": {
              "type": "number"
            }
          },
          "required": [
            "model",
            "prompt",
            "response",
            "tokensUsed",
            "timestamp",
            "duration"
          ],
          "additionalProperties": false,
          "description": "LLM interaction for monitoring and debugging"
        }
      },
      "required": [
        "statement",
        "status",
        "explanation",
        "llmInteraction"
      ],
      "additionalProperties": false,
      "$schema": "http://json-schema.org/draft-07/schema#"
    }
  },
  "check-math": {
    "config": {
      "id": "check-math",
      "name": "Check Mathematical Accuracy",
      "description": "Analyze text for mathematical errors including calculations, logic, units, and notation using Claude",
      "version": "1.0.0",
      "category": "analysis",
      "costEstimate": "~$0.02 per check (1 Claude call with longer analysis)",
      "path": "/api/tools/check-math",
      "status": "stable"
    },
    "inputSchema": {
      "type": "object",
      "properties": {
        "statement": {
          "type": "string",
          "minLength": 1,
          "maxLength": 1000,
          "description": "A single mathematical statement to analyze (e.g., \"2 + 2 = 4\" or \"The square root of 16 is 4\")"
        },
        "context": {
          "type": "string",
          "maxLength": 500,
          "description": "Additional context about the statement"
        }
      },
      "required": [
        "statement"
      ],
      "additionalProperties": false,
      "$schema": "http://json-schema.org/draft-07/schema#"
    },
    "outputSchema": {
      "type": "object",
      "properties": {
        "statement": {
          "type": "string",
          "description": "The original statement that was analyzed"
        },
        "status": {
          "type": "string",
          "enum": [
            "verified_true",
            "verified_false",
            "cannot_verify"
          ],
          "description": "Analysis result"
        },
        "explanation": {
          "type": "string",
          "description": "Clear explanation of why the statement is true, false, or cannot be verified"
        },
        "reasoning": {
          "type": "string",
          "description": "Detailed reasoning behind the analysis"
        },
        "errorDetails": {
          "type": "object",
          "properties": {
            "errorType": {
              "type": "string",
              "enum": [
                "calculation",
                "logic",
                "unit",
                "notation",
                "conceptual"
              ],
              "description": "Type of mathematical error"
            },
            "severity": {
              "type": "string",
              "enum": [
                "critical",
                "major",
                "minor"
              ],
              "description": "Severity of the error"
            },
            "conciseCorrection": {
              "type": "string",
              "description": "Concise summary of the correction (e.g., \"45 â†’ 234\", \"4x â†’ 5x\")"
            },
            "expectedValue": {
              "type": "string",
              "description": "The expected/correct value"
            },
            "actualValue": {
              "type": "string",
              "description": "The actual/incorrect value found in the statement"
            }
          },
          "required": [
            "errorType",
            "severity",
            "conciseCorrection"
          ],
          "additionalProperties": false,
          "description": "Details about the error (only present when status is verified_false)"
        }
      },
      "required": [
        "statement",
        "status",
        "explanation",
        "reasoning"
      ],
      "additionalProperties": false,
      "$schema": "http://json-schema.org/draft-07/schema#"
    }
  },
  "extract-math-expressions": {
    "config": {
      "id": "extract-math-expressions",
      "name": "Extract Mathematical Expressions",
      "description": "Extract and analyze mathematical expressions from text, including error detection and complexity assessment",
      "version": "1.0.0",
      "category": "analysis",
      "costEstimate": "~$0.02 per extraction (1 Claude call)",
      "path": "/api/tools/extract-math-expressions",
      "status": "stable"
    },
    "inputSchema": {
      "type": "object",
      "properties": {
        "text": {
          "type": "string",
          "minLength": 1,
          "maxLength": 50000,
          "description": "The text to extract mathematical expressions from"
        },
        "verifyCalculations": {
          "type": "boolean",
          "default": true,
          "description": "Whether to verify calculations for errors"
        },
        "includeContext": {
          "type": "boolean",
          "default": true,
          "description": "Whether to include contextual information"
        }
      },
      "required": [
        "text"
      ],
      "additionalProperties": false,
      "$schema": "http://json-schema.org/draft-07/schema#"
    },
    "outputSchema": {
      "type": "object",
      "properties": {
        "expressions": {
          "type": "array",
          "items": {
            "type": "object",
            "properties": {
              "originalText": {
                "type": "string",
                "description": "The exact mathematical expression as it appears in the text"
              },
              "hasError": {
                "type": "boolean",
                "description": "Whether the expression contains an error"
              },
              "errorType": {
                "type": "string",
                "enum": [
                  "calculation",
                  "logic",
                  "unit",
                  "notation",
                  "conceptual"
                ],
                "description": "Type of mathematical error"
              },
              "severity": {
                "type": "string",
                "enum": [
                  "critical",
                  "major",
                  "minor"
                ],
                "description": "Severity of the error"
              },
              "errorExplanation": {
                "type": "string",
                "description": "Explanation of the error"
              },
              "correctedVersion": {
                "type": "string",
                "description": "Corrected version of the expression"
              },
              "conciseCorrection": {
                "type": "string",
                "description": "Concise summary of the correction (e.g., \"45 â†’ 234\", \"4x â†’ 5x\", \"Ã—0.15 â†’ Ã—1.15\")"
              },
              "complexityScore": {
                "type": "number",
                "minimum": 0,
                "maximum": 100,
                "description": "How complex the mathematical expression is (0-100)"
              },
              "contextImportanceScore": {
                "type": "number",
                "minimum": 0,
                "maximum": 100,
                "description": "How important this expression is to the document context (0-100)"
              },
              "errorSeverityScore": {
                "type": "number",
                "minimum": 0,
                "maximum": 100,
                "description": "How severe the error is if present (0-100)"
              },
              "simplifiedExplanation": {
                "type": "string",
                "description": "Simplified explanation of complex expressions"
              },
              "verificationStatus": {
                "type": "string",
                "enum": [
                  "verified",
                  "unverified",
                  "unverifiable"
                ],
                "description": "Whether the calculation was verified"
              }
            },
            "required": [
              "originalText",
              "hasError",
              "complexityScore",
              "contextImportanceScore",
              "errorSeverityScore",
              "verificationStatus"
            ],
            "additionalProperties": false
          },
          "description": "List of extracted mathematical expressions"
        }
      },
      "required": [
        "expressions"
      ],
      "additionalProperties": false,
      "$schema": "http://json-schema.org/draft-07/schema#"
    }
  },
  "extract-forecasting-claims": {
    "config": {
      "id": "extract-forecasting-claims",
      "name": "Extract Forecasting Claims",
      "description": "Extracts predictions and converts them to binary (YES/NO) questions. Scores on three dimensions: precision (how binary/specific), verifiability (can we check with public data), and importance (centrality to argument)",
      "version": "2.0.0",
      "category": "analysis",
      "costEstimate": "~$0.01-0.03 per analysis (uses Claude Sonnet)",
      "path": "/tools/extract-forecasting-claims",
      "status": "stable"
    },
    "inputSchema": {
      "type": "object",
      "properties": {
        "text": {
          "type": "string",
          "minLength": 1,
          "maxLength": 10000,
          "description": "The text to analyze for forecasting claims"
        },
        "additionalContext": {
          "type": "string",
          "maxLength": 2000,
          "description": "Additional context about the document, company, or topic to help make predictions more specific"
        },
        "maxDetailedAnalysis": {
          "type": "number",
          "minimum": 1,
          "maximum": 10,
          "default": 3,
          "description": "Maximum number of forecasts to select for detailed analysis"
        },
        "minQualityThreshold": {
          "type": "number",
          "minimum": 0,
          "maximum": 100,
          "description": "Minimum average score (across precision, verifiability, and importance) required for a forecast to be included. Does not include robustness. Forecasts with average scores below this threshold will be filtered out."
        }
      },
      "required": [
        "text"
      ],
      "additionalProperties": false,
      "$schema": "http://json-schema.org/draft-07/schema#"
    },
    "outputSchema": {
      "type": "object",
      "properties": {
        "forecasts": {
          "type": "array",
          "items": {
            "type": "object",
            "properties": {
              "originalText": {
                "type": "string"
              },
              "thinking": {
                "type": "string"
              },
              "precisionScore": {
                "type": "number",
                "minimum": 0,
                "maximum": 100
              },
              "verifiabilityScore": {
                "type": "number",
                "minimum": 0,
                "maximum": 100
              },
              "importanceScore": {
                "type": "number",
                "minimum": 0,
                "maximum": 100
              },
              "rewrittenPredictionText": {
                "type": "string"
              },
              "authorProbability": {
                "type": "number",
                "minimum": 0,
                "maximum": 100
              },
              "robustnessScore": {
                "type": "number",
                "minimum": 0,
                "maximum": 100
              },
              "resolutionDate": {
                "type": "string"
              }
            },
            "required": [
              "originalText",
              "thinking",
              "precisionScore",
              "verifiabilityScore",
              "importanceScore",
              "rewrittenPredictionText",
              "robustnessScore"
            ],
            "additionalProperties": false
          },
          "description": "Extracted forecasts with multi-dimensional scores"
        }
      },
      "required": [
        "forecasts"
      ],
      "additionalProperties": false,
      "$schema": "http://json-schema.org/draft-07/schema#"
    }
  },
  "document-chunker": {
    "config": {
      "id": "document-chunker",
      "name": "Intelligent Document Chunker",
      "description": "Splits documents into semantic chunks optimized for LLM analysis. Supports multiple strategies including markdown-aware, semantic, and hybrid chunking.",
      "version": "1.0.0",
      "category": "utility",
      "costEstimate": "$0 (no LLM calls)",
      "path": "/tools/document-chunker",
      "status": "stable"
    },
    "inputSchema": {
      "type": "object",
      "properties": {
        "text": {
          "type": "string",
          "minLength": 1,
          "maxLength": 500000,
          "description": "The document text to chunk"
        },
        "maxChunkSize": {
          "type": "number",
          "minimum": 100,
          "maximum": 10000,
          "default": 1500,
          "description": "Maximum size of each chunk in characters"
        },
        "minChunkSize": {
          "type": "number",
          "minimum": 50,
          "maximum": 1000,
          "default": 200,
          "description": "Minimum size of each chunk in characters"
        },
        "preserveContext": {
          "type": "boolean",
          "default": true,
          "description": "Try to preserve semantic context when chunking"
        },
        "targetWords": {
          "type": "number",
          "minimum": 50,
          "maximum": 2000,
          "default": 500,
          "description": "Target word count for recursive markdown chunking"
        }
      },
      "required": [
        "text"
      ],
      "additionalProperties": false,
      "$schema": "http://json-schema.org/draft-07/schema#"
    },
    "outputSchema": {
      "type": "object",
      "properties": {
        "chunks": {
          "type": "array",
          "items": {
            "type": "object",
            "properties": {
              "id": {
                "type": "string"
              },
              "text": {
                "type": "string"
              },
              "startOffset": {
                "type": "number"
              },
              "endOffset": {
                "type": "number"
              },
              "startLine": {
                "type": "number"
              },
              "endLine": {
                "type": "number"
              },
              "metadata": {
                "type": "object",
                "properties": {
                  "type": {
                    "type": "string",
                    "enum": [
                      "paragraph",
                      "section",
                      "code",
                      "list",
                      "heading",
                      "mixed"
                    ]
                  },
                  "headingContext": {
                    "type": "array",
                    "items": {
                      "type": "string"
                    }
                  },
                  "isComplete": {
                    "type": "boolean"
                  },
                  "confidence": {
                    "type": "number",
                    "minimum": 0,
                    "maximum": 1
                  }
                },
                "required": [
                  "isComplete",
                  "confidence"
                ],
                "additionalProperties": false
              }
            },
            "required": [
              "id",
              "text",
              "startOffset",
              "endOffset",
              "startLine",
              "endLine",
              "metadata"
            ],
            "additionalProperties": false
          }
        },
        "metadata": {
          "type": "object",
          "properties": {
            "totalChunks": {
              "type": "number"
            },
            "averageChunkSize": {
              "type": "number"
            },
            "strategy": {
              "type": "string"
            },
            "warnings": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          "required": [
            "totalChunks",
            "averageChunkSize",
            "strategy"
          ],
          "additionalProperties": false
        }
      },
      "required": [
        "chunks",
        "metadata"
      ],
      "additionalProperties": false,
      "$schema": "http://json-schema.org/draft-07/schema#"
    }
  },
  "fuzzy-text-locator": {
    "config": {
      "id": "fuzzy-text-locator",
      "name": "Fuzzy Text Locator",
      "description": "Find the location of text within documents using multiple search strategies including exact matching, fuzzy matching, quote normalization, partial matching, and LLM fallback for paraphrased or difficult-to-find text",
      "version": "1.1.0",
      "category": "utility",
      "costEstimate": "Free (or minimal LLM cost if fallback is used)",
      "path": "/api/tools/fuzzy-text-locator",
      "status": "stable"
    },
    "inputSchema": {
      "type": "object",
      "properties": {
        "documentText": {
          "type": "string",
          "minLength": 1,
          "maxLength": 100000
        },
        "searchText": {
          "type": "string",
          "minLength": 1,
          "maxLength": 1000
        },
        "context": {
          "type": "string"
        },
        "lineNumberHint": {
          "type": "number",
          "minimum": 1,
          "description": "Optional line number to help narrow search"
        },
        "options": {
          "type": "object",
          "properties": {
            "normalizeQuotes": {
              "type": "boolean"
            },
            "partialMatch": {
              "type": "boolean"
            },
            "useLLMFallback": {
              "type": "boolean"
            }
          },
          "additionalProperties": false
        }
      },
      "required": [
        "documentText",
        "searchText"
      ],
      "additionalProperties": false,
      "$schema": "http://json-schema.org/draft-07/schema#"
    },
    "outputSchema": {
      "type": "object",
      "properties": {
        "searchText": {
          "type": "string"
        },
        "found": {
          "type": "boolean"
        },
        "location": {
          "type": "object",
          "properties": {
            "startOffset": {
              "type": "number"
            },
            "endOffset": {
              "type": "number"
            },
            "quotedText": {
              "type": "string"
            },
            "strategy": {
              "type": "string"
            },
            "confidence": {
              "type": "number"
            }
          },
          "required": [
            "startOffset",
            "endOffset",
            "quotedText",
            "strategy",
            "confidence"
          ],
          "additionalProperties": false
        },
        "error": {
          "type": "string"
        },
        "processingTimeMs": {
          "type": "number"
        },
        "llmUsed": {
          "type": "boolean"
        }
      },
      "required": [
        "searchText",
        "found",
        "processingTimeMs"
      ],
      "additionalProperties": false,
      "$schema": "http://json-schema.org/draft-07/schema#"
    }
  },
  "detect-language-convention": {
    "config": {
      "id": "detect-language-convention",
      "name": "Detect Language Convention",
      "description": "Detect whether text uses US or UK English conventions",
      "version": "1.0.0",
      "category": "analysis",
      "path": "/api/tools/detect-language-convention",
      "status": "stable",
      "costEstimate": "~$0.00 (no LLM calls)",
      "inputSchema": {
        "_def": {
          "unknownKeys": "strip",
          "catchall": {
            "_def": {
              "typeName": "ZodNever"
            },
            "~standard": {
              "version": 1,
              "vendor": "zod"
            }
          },
          "typeName": "ZodObject"
        },
        "~standard": {
          "version": 1,
          "vendor": "zod"
        },
        "_cached": null
      },
      "outputSchema": {
        "_def": {
          "unknownKeys": "strip",
          "catchall": {
            "_def": {
              "typeName": "ZodNever"
            },
            "~standard": {
              "version": 1,
              "vendor": "zod"
            }
          },
          "typeName": "ZodObject"
        },
        "~standard": {
          "version": 1,
          "vendor": "zod"
        },
        "_cached": null
      }
    },
    "inputSchema": {
      "type": "object",
      "properties": {
        "text": {
          "type": "string",
          "minLength": 1,
          "maxLength": 500000,
          "description": "The text to analyze for language convention (multiline)"
        }
      },
      "required": [
        "text"
      ],
      "additionalProperties": false,
      "$schema": "http://json-schema.org/draft-07/schema#"
    },
    "outputSchema": {
      "type": "object",
      "properties": {
        "convention": {
          "type": "string",
          "enum": [
            "US",
            "UK"
          ],
          "description": "Dominant language convention"
        },
        "confidence": {
          "type": "number",
          "minimum": 0,
          "maximum": 1,
          "description": "Confidence in the detection (0-1)"
        },
        "consistency": {
          "type": "number",
          "minimum": 0,
          "maximum": 1,
          "description": "How consistent the document is (0-1)"
        },
        "evidence": {
          "type": "array",
          "items": {
            "type": "object",
            "properties": {
              "word": {
                "type": "string",
                "description": "Example word found"
              },
              "convention": {
                "type": "string",
                "enum": [
                  "US",
                  "UK"
                ],
                "description": "Which convention this word belongs to"
              },
              "count": {
                "type": "number",
                "description": "Number of occurrences"
              }
            },
            "required": [
              "word",
              "convention",
              "count"
            ],
            "additionalProperties": false
          },
          "description": "Evidence supporting the detection"
        },
        "documentType": {
          "type": "object",
          "properties": {
            "type": {
              "type": "string",
              "enum": [
                "academic",
                "technical",
                "blog",
                "casual",
                "unknown"
              ],
              "description": "Type of document"
            },
            "confidence": {
              "type": "number",
              "minimum": 0,
              "maximum": 1,
              "description": "Confidence in document type detection"
            }
          },
          "required": [
            "type",
            "confidence"
          ],
          "additionalProperties": false,
          "description": "Detected document type"
        }
      },
      "required": [
        "convention",
        "confidence",
        "consistency",
        "evidence"
      ],
      "additionalProperties": false,
      "$schema": "http://json-schema.org/draft-07/schema#"
    }
  }
} as const;

export type ToolId = keyof typeof toolSchemas;

export function getToolSchema(toolId: ToolId) {
  return toolSchemas[toolId];
}
