#!/usr/bin/env tsx

/**
 * Build script to generate static JSON schemas from tool definitions
 * This extracts schemas at build time so they can be imported client-side
 * without pulling in server dependencies
 */

import fs from 'fs';
import path from 'path';
import { createHash } from 'crypto';
import { zodToJsonSchema } from 'zod-to-json-schema';

// Import all tools
import checkSpellingGrammarTool from '../src/tools/check-spelling-grammar';
import extractFactualClaimsTool from '../src/tools/extract-factual-claims';
import factCheckerTool from '../src/tools/fact-checker';
import checkMathWithMathJsTool from '../src/tools/check-math-with-mathjs';
import checkMathTool from '../src/tools/check-math';
import checkMathHybridTool from '../src/tools/check-math-hybrid';
import extractMathExpressionsTool from '../src/tools/extract-math-expressions';
import extractForecastingClaimsTool from '../src/tools/extract-forecasting-claims';
import documentChunkerTool from '../src/tools/document-chunker';
import fuzzyTextLocatorTool from '../src/tools/fuzzy-text-locator';
import { detectLanguageConventionTool } from '../src/tools/detect-language-convention';
import forecasterTool from '../src/tools/forecaster';
import { linkValidator } from '../src/tools/link-validator';
import perplexityResearchTool from '../src/tools/perplexity-research';

const tools = {
  'check-spelling-grammar': checkSpellingGrammarTool,
  'extract-factual-claims': extractFactualClaimsTool,
  'fact-checker': factCheckerTool,
  'check-math-with-mathjs': checkMathWithMathJsTool,
  'check-math': checkMathTool,
  'check-math-hybrid': checkMathHybridTool,
  'extract-math-expressions': extractMathExpressionsTool,
  'extract-forecasting-claims': extractForecastingClaimsTool,
  'document-chunker': documentChunkerTool,
  'fuzzy-text-locator': fuzzyTextLocatorTool,
  'detect-language-convention': detectLanguageConventionTool,
  'forecaster': forecasterTool,
  'link-validator': linkValidator,
  'perplexity-research': perplexityResearchTool,
};

// Convert schemas
const schemas: Record<string, any> = {};

for (const [id, tool] of Object.entries(tools)) {
  schemas[id] = {
    config: tool.config,
    inputSchema: tool.getInputJsonSchema(),
    outputSchema: tool.getOutputJsonSchema(),
  };
}

// Create a hash of the schemas for validation
const schemaContent = JSON.stringify(schemas, null, 2);
const schemaHash = createHash('sha256').update(schemaContent).digest('hex');

// Generate TypeScript module
const output = `/**
 * Auto-generated tool schemas
 * Generated by scripts/generate-schemas.ts
 * DO NOT EDIT MANUALLY
 * 
 * Schema Hash: ${schemaHash}
 */

export const toolSchemas = ${JSON.stringify(schemas, null, 2)} as const;

export type ToolId = keyof typeof toolSchemas;

export function getToolSchema(toolId: ToolId) {
  return toolSchemas[toolId];
}
`;

// Write to file
const outputPath = path.join(__dirname, '../src/tools/generated-schemas.ts');
fs.writeFileSync(outputPath, output);

console.log(`‚úÖ Generated schemas for ${Object.keys(tools).length} tools`);
console.log(`üìÅ Output: ${outputPath}`);