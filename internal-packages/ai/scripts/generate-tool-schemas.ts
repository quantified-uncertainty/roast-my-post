#!/usr/bin/env tsx

/**
 * Build script to generate static JSON schemas from tool definitions
 * This extracts schemas at build time so they can be imported client-side
 * without pulling in server dependencies
 */

import fs from 'fs';
import path from 'path';
import { createHash } from 'crypto';
import { zodToJsonSchema } from 'zod-to-json-schema';

// Import all tools from centralized registry
import { allTools } from '../src/tools/all-tools';

// Convert schemas
const schemas: Record<string, any> = {};

for (const [id, tool] of Object.entries(allTools)) {
  schemas[id] = {
    config: tool.config,
    inputSchema: tool.getInputJsonSchema(),
    outputSchema: tool.getOutputJsonSchema(),
  };
}

// Create a hash of the schemas for validation
const schemaContent = JSON.stringify(schemas, null, 2);
const schemaHash = createHash('sha256').update(schemaContent).digest('hex');

// Generate TypeScript module
const output = `/**
 * Auto-generated tool schemas
 * Generated by scripts/generate-tool-schemas.ts
 * DO NOT EDIT MANUALLY
 * 
 * Schema Hash: ${schemaHash}
 */

export const toolSchemas = ${JSON.stringify(schemas, null, 2)} as const;

export type ToolId = keyof typeof toolSchemas;

export function getToolSchema(toolId: ToolId) {
  return toolSchemas[toolId];
}
`;

// Write to file
const outputPath = path.join(__dirname, '../src/tools/generated-schemas.ts');
fs.writeFileSync(outputPath, output);

console.log(`‚úÖ Generated schemas for ${Object.keys(allTools).length} tools`);
console.log(`üìÅ Output: ${outputPath}`);